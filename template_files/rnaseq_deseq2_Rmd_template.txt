
# DESeq analysis
dds <- DESeq(ddsFullCountTable)
# obtain normalized counts
dds_count <- counts(dds, normalize=T)

# output results
res <- results(dds, cooksCutoff=FALSE, independentFiltering=FALSE)
res$gene_id <- row.names(res) 
  
#rlog transformations - used later in sample correlation heatmap and PCA plot
#in transformations, blind=FALSE means tells it to use the design info
#using blind=TRUE just uses the data with no background info
rld<- rlogTransformation(dds, blind=FALSE)

# add gene symbols for DE results
res_df <- as.data.frame(res)
res_df <- merge(countdata[which(countdata$Gene%in%res_df$gene_id),c("Gene","gene_symbol")],res_df,by.x="Gene",by.y="gene_id")
res_df <- res_df[order(res_df$pvalue, decreasing=FALSE),]

# gather counts in one column
res_ct_df <- as.data.frame(dds_count)
res_ct_df$Gene <- rownames(res_ct_df)
res_ct_df <- res_ct_df %>% gather(Sample, count, -Gene)

# add gene symbol and sample Status for normalized counts
res_ct_df <- merge(countdata[which(countdata$Gene%in%res_ct_df$Gene),c("Gene","gene_symbol")],res_ct_df,by="Gene")
res_ct_df <- merge(res_ct_df,coldata[which(coldata$Sample%in%res_ct_df$Sample),c("Sample","Status")],by="Sample")
res_ct_df$Status <- factor(res_ct_df$Status, levels = c(ctrl,case))
```

```{r, eval=T, echo=F}
#save down ALL DESeq2 results in the directory... this is not really going into the report so much as for reference
res_fn=paste0(project_name,"_",case,"_vs_",ctrl,"_full_DESeq2_results.txt")
write.table(res_df[order(res_df$pvalue, decreasing=FALSE),], res_fn, quote=FALSE, row.names=FALSE, sep='\t')
```

```{r, eval=F, echo=F}
# save normalized counts results. Stop save counts for two sample comparisons.
res_ct_fn=paste0(project_name,"_",case,"_vs_",ctrl,"_counts_normalized_by_DESeq2.txt")
write.table(res_ct_df, res_ct_fn, quote=F, row.names=F, col.names=T, sep='\t')
```

```{r, eval=T, echo=F}
# assign colours to comparison status
colour_status <- c("navy","red")
names(colour_status) <- c(ctrl,case) # assign red to case and navy to control
colour_status_list <- unlist(lapply(coldata_curr$Status,function(x){colour_status[x]}))
colours=c("#1B9E77", "#D95F02", "#7570B3", "#E7298A", "#66A61E", "#E6AB02", "#A6761D", "#666666", "#8DD3C7", "#FFFFB3", "#BEBADA", "#FB8072", "#80B1D3", "#FDB462", "#B3DE69", "#FCCDE5", "#D9D9D9", "#BC80BD", "#CCEBC5", "#FFED6F") # first 8 colour names derived from Dark2, and last 12 names from Set3
```

```{r, eval=T, echo=F}
if (exists("housekeeping_genes")) {
  comp=paste0(case,"_vs_",ctrl)
  # save padj for house-keeping genes if defined
  house_list[[comp]]=res_df[which(res_df$gene_symbol%in%housekeeping_genes),]
}
```


```{r, eval=T, echo=F, results="asis"}
summ_tb=as.data.frame(table(droplevels(coldata_curr$Status)))
names(summ_tb) <- c("Status","Count")
pandoc.table(summ_tb, split.tables=Inf, caption="Comparison Summary")
```

```{r, eval=T, echo=F}
if (exists("fav_genes")&any(fav_genes%in%res_df$gene_symbol)) {
  comp=paste0(case,"_vs_",ctrl)
  # save padj for house-keeping genes if defined
  fav_list[[comp]]=res_df[which(res_df$gene_symbol%in%fav_genes),]
}
```

### Top 50 genes by p-value
```{r, eval=T, echo=F}
#output table for report
#select top 50 by pvalue
#then round to 2 decimal points for output table
res_df_outp <- res_df %>% dplyr::filter(gene_symbol!="") %>% dplyr::filter(!is.na(gene_symbol)) # ignore genes that do not have gene symbols
res_df_outp <- head(res_df_outp[order(res_df_outp$pvalue, decreasing=FALSE),], 50)
res_df_outp[,c("baseMean", "log2FoldChange", "lfcSE", "stat")] <- round(res_df_outp[,c("baseMean", "log2FoldChange", "lfcSE", "stat")], 2)   
res_df_outp[,c("pvalue")] <- formatC(res_df_outp[,c("pvalue")], format = "e", digits = 2) # do this in 2 steps, else get "Error in is.finite(x) : default method not implemented for type 'list'"
res_df_outp[,c("padj")] <- formatC(res_df_outp[,c("padj")], format = "e", digits = 2) 
DT::datatable(res_df_outp, rownames=FALSE, options = list(columnDefs = list(list(className = 'dt-center', targets = "_all"))))
```

### Description of DESEq2 output 

```{r, eval=T, echo=F}
info_table <- as.data.frame(mcols(res, use.names=TRUE))
info_table$`Output Column` <- rownames(info_table)
info_table <- info_table[1:6, c("Output Column", "description")]
colnames(info_table) <- c("Output Column", "Description")
info_table$Description <- paste0(info_table$Description, ", computed by DESeq2")
info_table <- rbind(c("gene_symbol", "Official Gene Symbol, obtained using biomaRt if first column has Ensembl Gene IDs - else same as first column"), info_table)
info_table <- rbind(c("Gene", "Official Gene Symbol or Ensembl Gene ID, depending on reference files used for alignment"), info_table)

DT::datatable(info_table, rownames = FALSE, options = list(dom = 't', columnDefs = list(list(className = 'dt-left', targets = "_all"))))
```

### Volcano plots

Volcano plot (probes with a q-value <0.05 are present in red)

```{r, echo=F}
# The volplot_func function generates volcano plots
volplot_func <- function(df,qval_column,title) {
  # get qvalue column
  qval <- df[,qval_column]
  if (all(is.na(qval))) {message("The batch and status are highly confounded. Batch effect is not adjusted.")} else {         
    df <- df[!is.na(qval),] # remove NA values
    qval <- df[,qval_column]
    if (min(df[,qval_column])>=0.05) {
      df$sig <- "black" # assign colors to DE and non-DE genes
    } else {
      # assign colors to DE and non-DE genes
      df$sig <- rep(NA,nrow(df))
      df$sig[qval<0.05] <- "red"
      df$sig[qval>=0.05] <- "black"
    }
    df$sig <- as.factor(df$sig)
    color <- levels(df$sig)
    # log10 transformed q values
    df$logqval <- -log10(qval)
    diffgenes <- df$Gene[qval<0.05] #Create list of all DEG's
    signum = paste0(length(diffgenes), " DE genes (", qval_column, "<0.05)")
    #cat(length(diffgenes), "DE have been identified based on", qval_column)
    if (missing(title)) {title=signum}
    print(
    ggplot(df, aes(x = log2FoldChange, y = logqval, color=sig)) + geom_point(size=0.5) +
      theme_bw() +
      labs(title=title,x="log2FoldChange",y=paste0("-log10(",qval_column,")")) +
      scale_color_manual(values=color) +
      theme(legend.position="none")
    )
  }
}
```


```{r, eval=T, echo=F, fig.height=4, fig.width=4}
for (qval in c("pvalue","padj")) {volplot_func(df=res_df, qval_column=qval)}
```

### MA plot

```{r, eval=T, echo=F}
plotMA(dds,ylim=c(-2,2))
```

### Distribution of adjusted p-values

```{r, eval=T, echo=F}
hist(res$padj, main=" ", xlab="adjusted p-value", breaks=50, col="deepskyblue4", xaxp  = c(0, 1, 20))
```

### Dendrogram based on sample distance of regularized log transformed data

```{r, echo=F}
# The dist2 estimates distance between samples
dist2 <- function (x,fun = function(a, b) mean(abs(a - b), na.rm = TRUE),diagonal = 0) {
  if (!(is.numeric(diagonal) && (length(diagonal) == 1)))
    stop("'diagonal' must be a numeric scalar.")

  if (missing(fun)) {
    res = apply(x, 2, function(w) colMeans(abs(x-w), na.rm=TRUE))
  } else {
    res = matrix(diagonal, ncol = ncol(x), nrow = ncol(x))
    if (ncol(x) >= 2) {
      for (j in 2:ncol(x))
        for (i in 1:(j - 1))
          res[i, j] = res[j, i] = fun(x[, i], x[, j])
    } # if
  } # else
  colnames(res) = rownames(res) = colnames(x)
  return(res)
}

distplot_func <- function(m) {
  dend = as.dendrogram(hclust(as.dist(m), method = "single"))
  ord = order.dendrogram(dend)
  array_name=colnames(m)
  heatmap.2(m,Rowv=dend,Colv=dend,
    col=viridis(256, option="B"),ColSideColors=colour_status_list,RowSideColors=colour_status_list,
    labCol=array_name,labRow=array_name,
    trace="none",
    margins=c(12,20), # (bottom margin, left margin)
    cexRow = 1,cexCol = 1,
    keysize=1.5,key.title=NA,key.xlab="Dist2",key.ylab="Counts")
  legend("bottomleft",legend=names(colour_status),fill=colour_status,cex=0.6)
}
```

```{r, eval=T, echo=F, fig.height=10, fig.width=12}
distplot_func(m=dist2(assay(rld)))
```

### Heatmaps for top 30 significant genes

Genes were ranked by adjusted p-values.

```{r, echo=F}
# The heatmap_topgene_func function for top gene heatmap plots
heatmap_topgene_func <- function(tb, topnum=30, main="") {
  m=log2(dds_count+1)
  top.mat <- m[rownames(m)%in%tb[1:topnum,"Gene"],] # plot heatmap for top genes
  array_name <- colnames(m)
  gene_symbol=tb[1:topnum,"gene_symbol"]
  heatmap.2(na.omit(top.mat), col=viridis(256, option="B"),
    ColSideColors=colour_status_list, # use predefined colour_status_list, assign colors to status
    labCol=array_name, labRow=gene_symbol, # take out gene probe id
    trace="none",
    margins=c(12,20), # (bottom margin, left margin)
    cexRow=1,cexCol=1,
    keysize=1.5,key.title=NA,key.xlab="Log2-normalized counts",key.ylab="Counts",
    main=main)
  legend("bottomleft",legend=names(colour_status),fill=colour_status,cex=0.8) # use predifined colour_status
}
```

```{r , eval=T, echo=F, fig.height=10, fig.width=12}
res_df_outp <- res_df %>% dplyr::filter(gene_symbol!="") %>% dplyr::filter(!is.na(gene_symbol)) # ignore genes that do not have gene symbols
heatmap_topgene_func(tb=res_df_outp, topnum=30, main="")
```

### Principal component analysis (PCA) Plot based on regularized log transformed data

```{r, echo=F, warning=F, message=F}
# The pcastat_func function computes principal components
pcastat_func <- function(m, ntop=500) {
  # calculate the variance for each gene
  rv <- rowVars(m)
  # select the ntop genes by variance
  select <- order(rv, decreasing=TRUE)[seq_len(min(ntop, length(rv)))]
  m=m[select,]
  # obtain original expression data
  raw.data.pca <- na.omit(apply(m,2,function(x)replace(x,is.infinite(x),NA))) # replace infinite values to NAs and omit NAs
  # As scale function divides by the variance, the probe with the expression sd=0 across samples must be removed.
  sd <- apply(raw.data.pca,1,sd)
  raw.data.pca <- raw.data.pca[!sd==0,]
  # compute pcs
  pca <- prcomp(t(raw.data.pca), retx = TRUE, center = TRUE, scale = TRUE)
  pc <- data.frame(pca$x)
  # compute variance explained by each PC
  vars <- pca$sdev^2
  pcs <- t(pc)
  pvars <- vars*100.0/sum(vars) # proportion of variance (%) explained by each PC
  cumsum_pvars <- cumsum(pvars) # Cumulative Proportion of Variance (%)
  if (nrow(pcs)>10) {nres <- 10} else {nres=nrow(pcs)} # select top 10 PCs if number of PCs >10
  res <- data.frame(rownames(pcs),pvars,cumsum_pvars)[1:nres,]
  names(res) <- c("PC","Proportion of Variance (%)","Cumulative Proportion of Variance (%)")
  return(list(tb=res,pc=pc))
}

# The pcaplot_func creates plots for pc1 and pc2
pcaplot_func <- function(pc, group_var) { # group_var: column name for a specific group
  df <- data.frame(
    PC1=pc$PC1,
    PC2=pc$PC2,
    group=coldata_curr[,group_var]
  )
  ggplot(df,aes(PC1,PC2,color=group)) + geom_point() + theme_bw()
}

# The pca_func function generates multiple pca plots for scan date, disease, treatment, and Donor
pca_func <- function(pc) {
  group_vars=c("Tissue", "Donor")
  idx_exist=c(1:length(group_vars))[group_vars%in%names(coldata_curr)] # obtain index of existing variables
  plot_list=list() # store plots in a list
  for (i in idx_exist) {
    group_var=group_vars[i]
    coldata_curr[,group_var] <- as.factor(coldata_curr[,group_var])
    nlevel=nlevels(coldata_curr[,group_var]) # levels of the variable
    if (group_var=="ScanDate_Group"|(nlevel>=2&nlevel<=20)) {
      plot_list[[group_var]]=pcaplot_func(pc, group_var=group_var)+scale_color_hue(name=group_var)
    }
  }
  return(plot_list)
}
```

Compute PCs and variance explained by the first 10 PCs

```{r, eval=T, echo=F, warning=F, message=F, results="asis"}
res_pca <- pcastat_func(m=assay(rld))
pandoc.table(res_pca$tb, split.tables=Inf, caption="Variance explained")
```

PCA plots are generated using the first two principle components colored by known factors (e.g. Status, Tissue, or Donor)

```{r, eval=T, echo=F, message=F, warning=F}
pcaplot_func(pc=res_pca$pc,group_var="Status")+scale_color_manual("Status",values=colour_status,na.value="grey")
```

```{r, eval=T, echo=F, message=F, warning=F}
plot_list=pca_func(pc=res_pca$pc)
for (i in plot_list) {print(i)}
```


### Dispersion plot

```{r, eval=T, echo=F}
plotDispEsts(dds)

```

### Plot of the maximum Cook's distance per gene over the rank of the Wald statistics for the condition

```{r, eval=T, echo=F}
W <- res$stat
maxCooks <- apply(assays(dds)[['cooks']],1,max)
idx <- !is.na(W)
plot(rank(W[idx]), maxCooks[idx], xlab='rank of Wald statistic', ylab='maximum Cooks distance per gene', ylim=c(0,5), cex=.4, col=rgb(0,0,0,.3))

```

### Boxplots for top 20 differentially expressed genes

Genes were ranked by pvalue.  Counts have been normalized by sequencing depth, with pseudocount of 0.5 added to allow for log scale plotting, using DESeq2 function plotCounts().

```{r, echo=F}
boxplot_func <- function(df) {
    gene_symbol=unique(df$gene_symbol)
    gene_id=unique(df$Gene)
    ggplot(df, aes(x = Status, y = count, fill=Status)) +
    geom_boxplot(outlier.colour=NA, lwd=0.2, color="grey18") + 
    stat_boxplot(geom ='errorbar', color="grey18") + 
    expand_limits(y=0) +
    geom_jitter(size=0.5, width=0.2) + 
    guides(fill=FALSE) +
    theme_bw() +  
    labs(title=paste0(gene_id, " ", gene_symbol)) +
    #labs(x="condition") +
    labs(y="Normalized counts") +
    theme(text = element_text(size=9), 
          strip.text.x = element_text(size = 10),
	  #axis.text.x = element_text(size=12),
          axis.text.x = element_text(angle = 90, hjust = 1, size=12),
          axis.text.y = element_text(size=9),
          plot.title = element_text(size=12),
          axis.title.x = element_blank(),
          axis.title.y = element_text(size=12))
}
```

```{r, eval=T, echo=F, message=F, cache=F, warning=F, fig.height=4, fig.width=4}
topnum=20
res_df_outp <- res_df %>% dplyr::filter(gene_symbol!="") %>% dplyr::filter(!is.na(gene_symbol)) # ignore genes that do not have gene symbols
res_df_outp <- head(res_df_outp[order(res_df_outp$pvalue, decreasing=FALSE),], 50)
for (i in 1:topnum) {
  gene_id <- res_df_outp[i,"Gene"]
  gene_symbol <- res_df_outp[i,"gene_symbol"]
  curr_data <- res_ct_df[which(res_ct_df$Gene==gene_id),]
  print(boxplot_func(df=curr_data)+scale_fill_manual(values=colour_status,na.value="grey"))
}
```

### Favorite genes

Boxplots for user-defined favorite genes if they exist, and show DE results

```{r, eval=T, echo=F, cache=FALSE, warning=F, message=F, fig.height=4, fig.width=4}
sel_fav_genes=fav_genes[fav_genes%in%as.character(res_df$gene_symbol)] # select favorite genes within the current results
if (length(sel_fav_genes)==0) {cat("None of user-defined genes are found in current DE results.\n")} else {
  for (i in sel_fav_genes) {
    gene_symbol=i
    gene_id <- res_df[which(res_df$gene_symbol==gene_symbol),"Gene"][1] # choose Ensembl gene with smallest p-values
    curr_data <- res_ct_df[which(res_ct_df$Gene==gene_id),]
    print(boxplot_func(df=curr_data)+scale_fill_manual(values=colour_status,na.value="grey"))
  }
}
```

```{r, eval=T, echo=F, message=F}
if (length(sel_fav_genes)>0) {
  fav_tb=data.frame()
  for (i in sel_fav_genes) {
    gene_symbol=i
    curr_data <- res_df[which(res_df$gene_symbol==gene_symbol),][1,] # choose Ensembl gene with smallest p-values
    fav_tb=rbind(fav_tb, curr_data)
  }
  fav_tb[,c("baseMean", "log2FoldChange", "lfcSE", "stat")] <- round(fav_tb[,c("baseMean", "log2FoldChange", "lfcSE", "stat")], 2)   
  fav_tb[,c("pvalue")] <- formatC(fav_tb[,c("pvalue")], format = "e", digits = 2) # do this in 2 steps, else get "Error in is.finite(x) : default method not implemented for type 'list'"
  fav_tb[,c("padj")] <- formatC(fav_tb[,c("padj")], format = "e", digits = 2) 
  DT::datatable(fav_tb, rownames=FALSE, options = list(columnDefs = list(list(className = 'dt-center', targets = "_all"))))
}
```

### Gene-set enrichment analysis


```{r eval=T, echo=F}
convertspeciesGeneList <- function(x){
  human 	<- useEnsembl("ensembl", dataset = "hsapiens_gene_ensembl", mirror = "useast")
  species 	<- useEnsembl("ensembl", dataset = convert_dataset, mirror = "useast")
  tmp 	<- getLDS(attributes = c("mgi_symbol"), filters = "mgi_symbol", values = x , mart = species, attributesL = c("hgnc_symbol"), martL = human, uniqueRows=TRUE)
  return(tmp)
}
if (ref_genome!="hg38") {
  nonhuman_symbol <- convertspeciesGeneList(x=as.character(norm.counts$gene_symbol))
  res_df <- merge(res_df, nonhuman_symbol, by.x="gene_symbol", by.y="MGI.symbol", all.x=T) %>%
    dplyr::rename(nonhuman_symbol=gene_symbol, gene_symbol=HGNC.symbol) %>%
    dplyr::arrange(padj)
}
```


```{r eval=T, echo=F}
# generate the list of z-score statistics
de_modi <- res_df %>%
  dplyr::filter(gene_symbol!="") %>% # remove Ensemble ID cannot be mapped to genes
  dplyr::filter(gene_symbol!="NA") %>% # remove Ensemble ID cannot be mapped to genes
  dplyr::arrange(gene_symbol, padj, -abs(log2FoldChange)) %>% # order by gene name, p-values and descending absolute logFC values
  dplyr::group_by(gene_symbol) %>% # group by gene name
  dplyr::filter(dplyr::row_number()==1) %>% # select first row in each gene
  dplyr::ungroup() %>%
  dplyr::select(gene_symbol,stat) %>% # replace column names
  dplyr::arrange(stat) %>%
  as.data.frame()
gene_stat <- de_modi$stat
names(gene_stat) <- de_modi$gene_symbol
```

```{r eval=T, echo=F, message=F, warning=F}
# run fgsea
res <- fgsea(pathways=pathways.msigkeggreac, stats=gene_stat, minSize=15, maxSize=500, nperm=10000, gseaParam=1)
# collapse dependent pathways. create a list of mainPathways and parentPathways
collapsedPathways <- collapsePathways(fgseaRes=res[order(pval),], pathways=pathways.msigkeggreac, stats=gene_stat, gseaParam=1)
mainPathways <- collapsedPathways$mainPathways
parentPathways <- collapsedPathways$parentPathways
res=res %>% dplyr::arrange(padj) # order by padj value
# annotate main pathways to fgsea results
res$main_pathway <- sapply(res$pathway, function(x){if (x%in%mainPathways) {"main"} else {parentPathways[[x]]}})
```

```{r eval=T, echo=F}
# convert the list column leadingEdge into character
convtleadingEdge_func <- function(fgsea_res) {
  leadingEdge <- rep(NA, nrow(fgsea_res))
  leadingEdge <- sapply(fgsea_res$leadingEdge, function(x)paste(x,collapse=","))
  fgsea_res$leadingEdge <- NULL
  fgsea_res <- as.data.frame(do.call(cbind,lapply(fgsea_res,unlist)))
  fgsea_res$leadingEdge <- leadingEdge
  return(fgsea_res)
}
res_save <- convtleadingEdge_func(res)
res_fn <- paste0(project_name,"_",case,"_vs_",ctrl,"_fgsea_results.csv")
write.csv(res_save, res_fn, row.names = F)
```

View top main pathways in fgsea results.

```{r eval=T, echo=F}
res_show <- res[padj<0.05&main_pathway=="main"]
cat(nrow(res_show), "main pathways are significant.\n")
```

```{r eval=T, echo=F}
if (nrow(res_show)==0) {
  res_show <- res[main_pathway=="main"][1:10] # if no significant pathway, take the top 10 main pathways
}
res_show <- res_show %>%
  dplyr::mutate(pval=round(pval,4), padj=round(padj,4), ES=round(ES,3), NES=round(NES,3))
leadingEdge <- rep(NA, nrow(res_show))
leadingEdge <- sapply(res_show$leadingEdge, function(x)paste(x[1:5],collapse=","))
res_show$leadingEdge <- NULL
res_show$leadingEdge <- leadingEdge
if (nrow(res_show)>50) {
  DT::datatable(res_show[1:50], rownames=FALSE, options = list(columnDefs = list(list(className = 'dt-center', targets = "_all"))))
} else {
  DT::datatable(res_show, rownames=FALSE, options = list(columnDefs = list(list(className = 'dt-center', targets = "_all"))))
}
```


Generate barplot if pathways with absoluate NES>=2 or top 10 pathways if no pathways pass the threshold

```{r eval=T, echo=F}
#Generate data barplots for top pathways
res_barplot <- res[padj<0.05&abs(NES)>2]
if (nrow(res_barplot)==0) {
  res_barplot <- res[1:10]
}
if (nrow(res_barplot)<=10) {height=8} else {height=15/50*nrow(res_barplot)}
```


```{r, echo=F}
textconv4plot_func <- function(x) {
  if (x=="REACTOME_ACTIVATION_OF_THE_MRNA_UPON_BINDING_OF_THE_CAP_BINDING_COMPLEX_AND_EIFS_AND_SUBSEQUENT_BINDING_TO_43S") {x <- "REACTOME_MRNA_ACTIVATION_CAP_BINDING_COMPLEX_EIFS_43S_BINDING"}
  if (x=="REACTOME_ANTIGEN_PRESENTATION_FOLDING_ASSEMBLY_AND_PEPTIDE_LOADING_OF_CLASS_I_MHC") {x<-"REACTOME_ANTIGEN_PRESENTATION_CLASS_I_MHC"}
  if (x=="REACTOME_BIOSYNTHESIS_OF_THE_N_GLYCAN_PRECURSOR_DOLICHOL_LIPID_LINKED_OLIGOSACCHARIDE_LLO_AND_TRANSFER_TO_A_NASCENT_PROTEIN") {x <- "REACTOME_BIOSYNTHESIS_OF_N_GLYCAN_PRECURSOR_AND_TRANSFER_TO_A_NASCENT_PROTEIN"}
  if (x=="REACTOME_TRANSPORT_OF_GLUCOSE_AND_OTHER_SUGARS_BILE_SALTS_AND_ORGANIC_ACIDS_METAL_IONS_AND_AMINE_COMPOUNDS") {x <- "REACTOME_TRANSPORT_OF_BILE_SALTS"}
  if (x=="REACTOME_NEUROTRANSMITTER_RECEPTOR_BINDING_AND_DOWNSTREAM_TRANSMISSION_IN_THE_POSTSYNAPTIC_CELL") {x <- "REACTOME_NEUROTRANSMITTER_RECEPTORS"}
  if (x=="REACTOME_RESPIRATORY_ELECTRON_TRANSPORT_ATP_SYNTHESIS_BY_CHEMIOSMOTIC_COUPLING_AND_HEAT_PRODUCTION_BY_UNCOUPLING_PROTEINS"){x<-"REACTOME_RESPIRATORY_ELECTRON_TRANSPORT_ATP_SYNTHESIS"}
  return(x)
}

textconv_func <- function(x) {
  x=tolower(x)
  x=gsub("_"," ",x)
  x=gsub("27 hydroxycholesterol", "27-hydroxycholesterol", x)
  x=gsub("43s", "43S", x)
  x=gsub("apc c mediated", "APC/C-mediated", x)
  x=gsub("atp","ATP",x)
  x=gsub("b cell","B cell",x)
  x=gsub("bcr","BCR",x)
  x=gsub("bmp","BMP",x)
  x=gsub("ca2","Ca2",x)
  x=gsub("cap binding complex", "cap-binding complex", x)
  x=gsub("cct", "CCT", x)
  x=gsub("CCT tric", "CCT/TriC", x)
  x=gsub("class i mhc", "class I MHC", x)
  x=gsub("class iii", "class III", x)
  x=gsub("class ii", "class II", x)
  x=gsub("class i", "class I", x)
  x=gsub("c type lectin receptors clrs", "C-type lectin receptors (CLRs)",x)
  x=gsub("c mediated","C mediated",x)
  x=gsub("cdk2","Cdk2",x)
  x=gsub("ddx58 ifih1", "DDX58/IFIH1", x)
  x=gsub("dna", "DNA", x)
  x=gsub(" eifs"," eIFs", x)
  x=gsub("fceri", "FCERI", x)
  x=gsub("g1 s","G1/S",x)
  x=gsub("g alpha i","G alpha (i)",x)
  x=gsub("gpcr","GPCR",x)
  x=gsub("gtp","GTP",x)
  x=gsub("hiv", "HIV", x)
  x=gsub("ikks", "IKKs", x)
  x=gsub("inf", "INF", x)
  x=gsub("INFection","infection",x)
  x=gsub("INFluenza","influenza",x) # convert INF back to inf
  x=gsub("jak stat", "JAK-STAT", x)
  x=gsub(" llo", " LLO", x) # DOLICHOL_LIPID_LINKED_OLIGOSACCHARIDE_LLO
  x=gsub("kegg","KEGG:",x)
  x=gsub("ksrp","KSRP",x) # archived
  x=gsub(" m phase"," M phase",x)
  x=gsub("ncam1","NCAM1",x)
  x=gsub(" n glycan", " N glycan", x)
  x=gsub("nfkb", "NFkB", x)
  x=gsub("nf kb", "NFkB", x)
  x=gsub("nod1 2", "NOD1/2", x)
  x=gsub("nod like","NOD-like",x)
  x=gsub("non lymphoid","non-lymphoid",x)
  x=gsub("o linked", "O-linked",x)
  x=gsub("orc1", "Orc1", x)
  x=gsub("p 27 p21","p21/27",x)
  x=gsub("p450","P450",x)
  x=gsub("parkinsons", "Parkinson's", x)
  x=gsub("perk", "PERK", x)
  x=gsub("phospholipase c","phospholipase C",x)
  x=gsub("phase iii","phase III",x)
  x=gsub("phase ii","phase II",x)
  x=gsub("phase i","phase I",x)
  x=gsub("pol iii","pol III",x)
  x=gsub("pol ii","pol II",x)
  x=gsub("pol i","pol I",x)
  x=gsub("pre initiation","pre-initiation",x)
  x=gsub("pre mrna", "pre-mRNA",x)
  x=gsub("reactome","Reactome:",x)
  x=gsub("runx3","RUNX3",x)
  x=gsub("mhc","MHC",x)
  x=gsub("rho","Rho",x)
  x=gsub("rig i like", "RIG-I-like", x)
  x=gsub("rig i mda5", "RIG-I/MDA5", x)
  x=gsub("rna","RNA",x)
  x=gsub("teRNAry","ternary",x) # fix words replaced by RNA
  x=gsub(" s phase"," S phase",x)
  x=gsub("slits","SLITs",x)
  x=gsub("robo","ROBO",x)
  x=gsub("srp dependent","SRP-dependent",x)
  x=gsub("scf skp2", "SCF(Skp2)", x)
  x=gsub("tak1", "TAK1", x)
  x=gsub("tca","TCA",x)
  x=gsub("tcr signaling", "TCR signoaling", x)
  x=gsub("tgf","TGF",x)
  x=gsub("tp53","TP53",x)
  x=gsub("3 utr","3' UTR",x)
  x=gsub("cytokine cytokine receptor","cytokine-cytokine receptor",x)
  return(x)
}

checkvar_func <- function(variable) {
  if (variable!="") {
    if (!file.exists(get(variable))) {
      stop(variable,"='",get(variable),"' does not exist")
    }
  }
}
```

```{r eval=T, echo=F, fig.height=height, fig.width=15}
dat_barplot <- data.frame(pathway=res_barplot$pathway, NES=res_barplot$NES)
dummies=paste0(rep(LETTERS,each=length(LETTERS)),rep(LETTERS,length(LETTERS)))
dummy <- data.frame(pathway=c(dat_barplot[order(-dat_barplot$NES),"pathway"]),dummy=dummies[1:nrow(dat_barplot)])
dat_barplot <- merge(dat_barplot,dummy,by="pathway")
labels <- as.character(dummy$pathway)
labels <- unname(sapply(labels,textconv_func))
ggplot(dat_barplot,aes(y=NES,x=dummy)) + geom_bar(width=0.8, position=position_dodge(width=0.8), stat="identity", fill="#006d2c") + 
  coord_flip() +
  scale_x_discrete(labels=labels) +
  ylab("normalized enrichment score")+
  theme_bw()+
  theme(
    axis.title.y=element_blank(),
    axis.text.y=element_text(size=11),
    axis.title.x=element_text(size=9))
```

View leading edges in top pathways. Select top five pathways with positive and negative NES respectively

```{r, eval=T, echo=F}
res_pos = res_show[NES>=0]
if (nrow(res_pos)>0) {
  top_pos = res_pos[order(-NES)]$pathway[1:5]
  for (i in top_pos[!is.na(top_pos)]) {
    print(plotEnrichment(pathway = pathways.msigkeggreac[[i]], stats = gene_stat) + labs(title=i))
  }
}
```
             
```{r, eval=T, echo=F}
res_neg = res_show[NES<=0]
if (nrow(res_neg)>0) {
  top_neg = res_neg[order(NES)]$pathway[1:5]
  for (i in top_neg[!is.na(top_neg)]) {
    print(plotEnrichment(pathway = pathways.msigkeggreac[[i]], stats = gene_stat) + labs(title=i))
  }
}
```
             

