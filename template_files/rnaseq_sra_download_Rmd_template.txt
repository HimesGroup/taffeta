Install the prerequisite NCBI tool kits if they do not exist
* esearch 
* efetch

Install the prerequisite R packages if they do not exist
* GEOquery (if geo_id is specified)
* dplyr
* pander

Load the necessary libraries.


```{r lib, eval=T, echo=F, message=F, warning=F}
if (exists("geo_id")){library(GEOquery)}
library(dplyr)
library(pander)
```

### Obtain raw GEO phenotype file

Obtain raw sample information including SRA ID from GEO. If pheno_fn is specified, download samples based on SRA_ID column; otherwise, download samples based on the GEO raw phenotype file.

```{r geo_download, eval=T, echo=F, message=F, warning=F}
if (exists("geo_id")){
  if (!exists("pheno_fn")) {
    geo_fn <- paste0(out_dir, geo_id, "_series_matrix.txt.gz")
    if (!file.exists(geo_fn)) { # matrix files are alreadly downloaded
      gse <- getGEO(geo_id, destdir=out_dir, GSEMatrix = TRUE)[[1]] # download matrix file
    } else {
      gse <- getGEO(filename=geo_fn,GSEMatrix = TRUE)
    }
  }
}
```

Show expression dataset features using gse matrix
```{r gse, eval=T, echo=F}
if (exists("geo_id")){
  if (!exists("pheno_fn")) {
    gse
  }
}
```

### Raw phenotype summary

Generated a summary of all the phenotypic variables for overview.

For continuous variables, show the summary table. For categorical variables, only show the first five levels of variables.

Generate a variable, suppldata (whether supplementary data are available), based on whether the column supplementary_file is none.

```{r phenoraw_summ, eval=T, echo=F, results="asis"}
if(exists("geo_id")){
  pheno.raw <- pData(phenoData(gse))
  for (x in names(pheno.raw)) {
    vec=pheno.raw[,x]
    if (!is.numeric(vec)) {
      vec <- factor(vec)
      if (nlevels(vec)>5) {res=table(droplevels(vec[vec%in%levels(vec)[1:5]]))} else {res=table(vec)}
      res=data.frame(res)
      names(res) <- c(x,"counts")
    }
    if (is.numeric(vec)){res=summary(vec)}
    pandoc.table(res, justify='left',split.tables=Inf, caption=x)
  }
}
```

### Get SRA ftp link for samples

If pheno_fn is not defined, download samples that have SRA id from GEO raw phenotype files, otherwise, download samples from defined phenotype file.

SRA sample ID is derived from GEO phenotype where the column name with **relation** if SRA download is needed.

```{r pheno.raw, eval=T, echo=F, message=F, warning=F}
if (exists("geo_id")){
  if (!exists("pheno_fn")) {
    relation_cols <- which(grepl("relation",names(pheno.raw))) # columns which have "relation" in column names
    relation_col=relation_cols[sapply(relation_cols, function(x){ # the column with "SRX" is where to retain the SRA ID
      relation=pheno.raw[,x]
      any(grepl("SRX", relation))
    })]
    if (length(relation_col)>1) {stop("More than two columns contain SRX information. Please check and speciy column name to the variable relation_name.")}
    relation_name=names(pheno.raw)[relation_col]
    files <- gsub(".*=","",pheno.raw[,relation_name])
  } else {
    pheno.raw <- read.table(pheno_fn, header=T, sep='\t')
    files <- pheno.raw$SRA_ID
  }
  cat("Samples for download:", paste(files,collapse=", "),"\n")
} else {
  if (exists("pheno_fn")) {
    pheno.raw <- read.table(pheno_fn, header=T, sep='\t')
    files <- pheno.raw$SRA_ID    
  } else {
    stop("GEO ID is not provided. Please provide user defined meta-data.")
  }
}
```

Get fastq file information from SRA repository using SRA Tools. Raw .fastq files will be downloaded in parallele using Linux bash script

```{r sra_func, echo=F, message=F, warning=F}
###
# Stop using SRAdb to retrieve data
###
# The sradownload_func downloads fastq file based on SRA id
sradownload_func <- function(file) {
  SRAdb::getSRAfile(file, sra_con,
    destDir = out_dir , fileType = 'fastq',
    srcType= 'ftp', makeDirectory = FALSE,
    method = 'libcurl', ascpCMD = NULL )
  cat("Finished downloading file:", file, "\n")
}

# The srainfo_func obtains ftp information for SRA fastq files
srainfo_func <-function(file) {
  sra_acc <- sraConvert(file, out_type=c('run'), sra_con = sra_con )
  getFASTQinfo (sra_acc$run, sra_con, srcType="ftp")
}

# The fastqinfo function can be used in absence of a GEO entry using the SRA ID
fastq_info_func <- function(SRA_ID) {
	sra_info <- sraConvert( in_acc=SRA_ID, out_type=c('experiment','run'), sra_con = sra_con )
 	#fastq_files <- arrange(sra_info,experiment,run)
 	sraFiles <- getFASTQinfo(in_acc = c(sra_info$experiment), sra_con, srcType = 'ftp' )
 	return(sraFiles)
}

# check if sample from GEO exists in SRAdb
sraconv_func <- function(files) {
  conversion <- sraConvert(files, sra_con = sra_con )
}
```

```{r sraFiles, eval=F, echo=F, message=F, warning=F}
###
# Stop using SRAdb to retrieve data
###
# download SRAmetadb.sqlite if it does not exist
if (!file.exists(paste0(out_dir, "/SRAmetadb.sqlite"))) {
  sqlfile <- getSRAdbFile()
  sra_con <- dbConnect(SQLite(),sqlfile)
} else {
  sra_con <- dbConnect(SQLite(),dbname="SRAmetadb.sqlite")
}
# check if files exist in sradb. If not, download fastq file from SRA using SRA toolkits
conversion <- sraconv_func(files)
sradb_exist <- nrow(conversion)!=0
if (!sradb_exist) {
  if (!exists("sra_id")) {stop(geo_id, " is not available in SRAdb. Please provide sra_id.")}
}

# check if all samples exist in SRAdb
if (sradb_exist) {
  if (!all(sapply(files, function(x){x%in%conversion$experiment}))) {
    cat("Not all samples in GEO or phenotype file are in SRAdb. Use SRA Tools for download.\n")
    if (!exists("sra_id")|!exists("pheno_fn")) {
      stop("Please provide SRA ID or phenotype file.")
    } else {sradb_exist=FALSE}
  }
}
```


```{r sra_download_sradbexist, eval=F, echo=F, message=F, warning=F}
###
# Stop using SRAdb to retrieve data
###

# if study the exists in SRAdb
# obtain SRA file information
if(exists("geo_id")){
  sraFiles <- do.call(rbind, lapply(files, srainfo_func)) %>% dplyr::filter(experiment%in%files) %>% unique() # exclude the same samples that are used in other projects
  write.table(sraFiles, paste0(out_dir, project_name, "_sraFile.info"), col.names=T,row.names=F,sep="\t",quote=F )
  
} else if (exists("sra_id")){
  sraFiles <- fastq_info_func(sra_id)
  sraFiles <- sraFiles %>% dplyr::filter(experiment%in%files) %>% dplyr::select(run,submission,study,sample,experiment,ftp) %>% unique() # exclude the same samples that are used in other projects
  write.table(sraFiles, paste0(out_dir, project_name, "_sraFile.info"), col.names=T,row.names=F,sep="\t",quote=F )
}
```

```{r sra_download_sradbnotexist, eval=T, echo=F, message=F, warning=F}
# if the study does not exist in SRAdb
# obtain metadata from SRA website
metadata_fn <- paste0(out_dir, "/", sra_id, ".metadata.csv") 
cmd_metadata_download <- paste0("esearch -db sra -query ", sra_id, " | efetch -format runinfo | awk -F ',' 'NR==1; NR>1 {print $0 | \"grep -v Run\" }' | sed '/^$/d' > ", metadata_fn)
system(cmd_metadata_download)
# save meta data in sraFile.info
sraFiles <- read.csv(metadata_fn)
names(sraFiles) <- unname(sapply(names(sraFiles), tolower))
sraFiles <- sraFiles %>% dplyr::filter(experiment%in%files) %>% dplyr::select(run,submission,experiment) %>% unique() # exclude the same samples that are used in other projects
write.table(sraFiles, paste0(out_dir, project_name, "_sraFile.info"), col.names=T,row.names=F,sep="\t",quote=F )
```

Show first five rows of SRA information
```{r srainfo_show, eval=T, echo=F, message=F, warning=F, results="asis"}
row.names(sraFiles) <- NULL
pandoc.table(head(sraFiles,5), justify='left',split.tables=Inf, caption="SRA information")
```

### User tailored phenotype file

**This step is only used for tailoring raw phenotype file from GEO. This step requires mannual inspection.**

Raw phenotypic variables are not informative (e.g. description, characteristics_ch1 and source_name_ch1) and not created in a consice way. Select useful phenotype variables and manually modify them using a standard format including the following columns: Sample, GEO_ID, Donor (required column for treatment comparison), Disease, Treatment, and any other information if provided such as Age, Gender, ERCC spike-in, Sequencing index, Sample preparation kit.

The example codes for this section are based on phenotype data from GSE52778 (SRA study ID: SRP033351).

```{r choose_pheno, eval=T, echo=F, message=F, warning=F}
# define parameters to execute corresponding block
retrive_pheno_fromGEO <- (!exists("pheno_fn"))&(exists("geo_id"))
use_pheno_fn <- exists("pheno_fn")
```

```{r pheno_from_GEO, eval=retrive_pheno_fromGEO, echo=F, message=F, warning=F}
library(dplyr)
cols=c("title","geo_accession", "characteristics_ch1.2","characteristics_ch1.3", "characteristics_ch1")
if (all(sapply(cols, function(x){x%in%names(pheno.raw)}))) {
    pheno <- pheno.raw %>%
      dplyr::select(cols) %>%
      dplyr::mutate(SRA_ID=files) %>%
      dplyr::mutate(GEO_ID=geo_accession) %>%
      dplyr::mutate(Donor=gsub("cell line: ","",characteristics_ch1.3)) %>%
      dplyr::mutate(Tissue="ASM") %>%
      dplyr::mutate(Treatment=gsub("treatment: ","",characteristics_ch1)) %>%
      dplyr::mutate(Treatment=gsub("Albuterol","alb",Treatment)) %>%
      dplyr::mutate(Treatment=gsub("Dexamethasone","dex",Treatment)) %>%
      dplyr::mutate(Treatment=gsub("Untreated","untreated",Treatment)) %>%
      dplyr::mutate(Disease="nonasthma") %>%
      dplyr::mutate(ERCC_Mix=gsub("ercc_mix: ","",characteristics_ch1.2)) %>%
      dplyr::select(-one_of(cols)) %>% # remove original columns
      dplyr::mutate(SRA_ID=files) %>%
      dplyr::mutate_if(is.character,as.factor) 
} else {
  cat("Not all pre-defined column names are in meta data. Use raw meta data.\n")
  pheno <- pheno.raw
}
pheno <- merge(unique(sraFiles[,c("run","experiment")]), pheno, by.x="experiment", by.y="SRA_ID", all.y=T) # add sample name (run column from SRA database)
names(pheno)[names(pheno)%in%c("run")] <- c("Sample")
names(pheno)[names(pheno)%in%c("experiment")] <- c("SRA_ID")
detach("package:dplyr")
write.table(pheno, paste0(out_dir, geo_id, "_withoutQC.txt"),col.names=T,row.names=F,sep="\t",quote=F)
```

```{r pheno_from_file, eval=use_pheno_fn, echo=F, message=F, warning=F}
pheno <- read.table(pheno_fn, header=T, sep="\t")
```

Show the summary of phenotype variables and the sample size for different groups

```{r pheno_summ, eval=T, echo=F, message=F, warning=F, results="asis"}
# show the first five rows
if(exists("pheno_fn")|exists("geo_id")){
  pandoc.table(head(pheno,5), split.tables=Inf,caption="Show the first 5 rows of the modified phenotype file")
  # show the groups of interest
  avail_group=c("Tissue","Disease","Treatment")[c("Tissue","Disease","Treatment")%in%names(pheno)] 
  if (length(avail_group)>0) {
    res=as.data.frame(table(pheno[,avail_group]))
    names(res) <- c(avail_group,"Count")
    pandoc.table(res, split.tables=Inf, caption="Sample size in different tissue and disease/treatment groups")
  }
 }
```

#### Session information

```{r sessioninfo, echo=F}
pander(sessionInfo())
```
